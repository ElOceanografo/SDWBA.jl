{
    "docs": [
        {
            "location": "/", 
            "text": "SDWBA\n\n\nThis Julia package implements the (stochastic) distorted-wave Born approximation for simple, fluid-like scatterers. The goal is to provide a set of easy-to-use tools to calculate the acoustic backscattering cross-sections of marine organisms using the (stochastic) distorted-wave Born approximation (the DWBA or SWDBA). These models discretize zooplankton or other scatterers as a series of cylindrical sections, and are efficient and accurate for fluid-like organisms, including krill and copepods.\n\n\nInstallation\n\n\nTo install, run\n\n\nPkg.clone(\nhttps://github.com/ElOceanografo/SDWBA.jl.git\n)\n\n\n\n\nIt can then be loaded the normal way:\n\n\nusing SDWBA\n\n\n\n\nBasic use\n\n\nConstructing Scatterers\n\n\nSound-scattering things (e.g. zooplankton) are represented as \nScatterer\n objects.  A \nScatterer\n contains information about the shape and material properties of such an object.  The (S)DWBA assumes the a deformed cylindrical shape: circular in cross-section, with a varying radius and a centerline that doesn't need to be straight.  A \nScatterer\n represents this shape as a series of discrete segments.\n\n\nTo construct a scatterer, we need to specify the 3-D coordinates of its centerline.  The standard orientation is for the animal's body to lie roughly parallel to the x-axis, with the z-axis pointing up.\n\n\nx = linspace(0, 0.2, 10)\ny = zeros(x)\nz = zeros(x)\n\n\n\n\nThese coordinates are stacked into a 3xN matrix, which will be called \nr\n.\n\n\nr = [x'; y'; z']\n\n\n\n\nThe scatterer's radius can vary as well.  We'll make ours kinda lumpy.\n\n\na = randn(10).^2  # squared to make sure the're all positive\n\n\n\n\nWe also define the density and sound-speed contrasts \nh\n and \ng\n (value inside scatterer / value in the surrounding medium).  These can vary from one segmen to another, but will often be assumed constant inside the scatterer.\n\n\nh = 1.02 * ones(a)\ng = 1.04 * ones(a)\n\n\n\n\nWe can now define the scatterer.\n\n\nweird_zoop = Scatterer(r, a, h, g)\n\n\n\n\nLoading Scatterers from file\n\n\nA function \nfrom_csv()\n is provided to load a scatterer directly from a comma-separated datafile.  This file should have columns for the x, y, z, a, g, and h values of the scatterer.  If the columns have those names, the function will work automatically:\n\n\nmy_scat = from_csv(\npath/to/my_scat.csv\n)\n\n\n\n\nIf the columns have some other names, you can provide a dictionary telling the function which is which.\n\n\ncolnames = Dict([(\nx\n,\nfoo\n),(\ny\n,\nbar\n),(\nz\n,\nbaz\n), (\na\n,\nqux\n),\n    (\nh\n,\nplugh\n), (\ng\n,\ngarply\n)])\nmy_scat = from_csv(\npath/to/my_scat.csv\n, colnames)\n\n\n\n\n\nBuild-in models\n\n\nThe package comes with a sub-module called \nModels\n containing several ready-made \nScatterer\ns.  See the documentation for references for each one.\n\n\nkrill = Models.krill_mcgeehee\n\n\n\n\nCalculating backscatter\n\n\nThere are three functions that calculate backscatter: \nform_function\n, \nbackscatter_xsection\n, and \ntarget_strength\n.  Each is just a wrapper around the one before it, and they all have the same arguments.\n\n\nkrill = Models.krill_mcgeehee\nfreq = 120e3 # Hz\nsound_speed = 1470 # m/s\n\n# deterministic DWBA\ntarget_strength(krill, freq, sound_speed)\n\n# stochastic SDWBA\nphase_sd = 0.7071\ntarget_strength(krill, freq, sound_speed, phase_sd)\n\n\n\n\nWhen a frequency and sound speed are provided, the sound is assumed to come from above, as is the usual case with a ship-mounted echosounder.  If you would like it to come from some other direction, you can specify a 3-D wavenumber vector--that is, a vector, pointing in the direction of propagation, whose magnitude is $k = 2 pi f / c$.\n\n\nk_mag = 2pi * freq / sound_speed\nk_vertical = [0.0, 0.0, -k_mag]\ntarget_strength(krill, k_vertical)\n\nangle = deg2rad(30)\nk_slanted = k_mag * [sin(angle), 0, cos(angle)]\ntarget_strength(krill, k_slanted)\n\n\n\n\nIt is usually easier to think of the scatterer tilting than the wavenumber vector.  The \nrotate\n function does this easily, accepting roll, tilt, and yaw angles (in degrees) as keyword arguments.\n\n\ntarget_strength(rotate(krill, tilt=30), freq, sound_speed)\ntarget_strength(rotate(krill, tilt=45, roll=10), freq, sound_speed)\n\n\n\n\nFrequency and tilt-angle spectrums\n\n\nOften, we are interested in calculating the target strength of a scatter over a range of frequencies or angles.  Two convenience functions are provided to do this: \nfreq_spectrum\n and \ntilt_spectrum\n.  Both return a dictionary, with results in both the linear and log domains.\n\n\nstart, stop = 10e3, 1000e3 # endpoints of the spectrum, in Hz\nnfreqs = 200\nfs = freq_spectrum(krill, start, stop, sound_speed, nfreqs)\n\nrequire(:PyPlot)\nsemilogx(fs[\nfreqs\n], fs[\nTS\n])\n\n\nts = tilt_spectrum(krill, -180, 180, k_vertical, 360)", 
            "title": "Introduction"
        }, 
        {
            "location": "/#sdwba", 
            "text": "This Julia package implements the (stochastic) distorted-wave Born approximation for simple, fluid-like scatterers. The goal is to provide a set of easy-to-use tools to calculate the acoustic backscattering cross-sections of marine organisms using the (stochastic) distorted-wave Born approximation (the DWBA or SWDBA). These models discretize zooplankton or other scatterers as a series of cylindrical sections, and are efficient and accurate for fluid-like organisms, including krill and copepods.", 
            "title": "SDWBA"
        }, 
        {
            "location": "/#installation", 
            "text": "To install, run  Pkg.clone( https://github.com/ElOceanografo/SDWBA.jl.git )  It can then be loaded the normal way:  using SDWBA", 
            "title": "Installation"
        }, 
        {
            "location": "/#basic-use", 
            "text": "Constructing Scatterers  Sound-scattering things (e.g. zooplankton) are represented as  Scatterer  objects.  A  Scatterer  contains information about the shape and material properties of such an object.  The (S)DWBA assumes the a deformed cylindrical shape: circular in cross-section, with a varying radius and a centerline that doesn't need to be straight.  A  Scatterer  represents this shape as a series of discrete segments.  To construct a scatterer, we need to specify the 3-D coordinates of its centerline.  The standard orientation is for the animal's body to lie roughly parallel to the x-axis, with the z-axis pointing up.  x = linspace(0, 0.2, 10)\ny = zeros(x)\nz = zeros(x)  These coordinates are stacked into a 3xN matrix, which will be called  r .  r = [x'; y'; z']  The scatterer's radius can vary as well.  We'll make ours kinda lumpy.  a = randn(10).^2  # squared to make sure the're all positive  We also define the density and sound-speed contrasts  h  and  g  (value inside scatterer / value in the surrounding medium).  These can vary from one segmen to another, but will often be assumed constant inside the scatterer.  h = 1.02 * ones(a)\ng = 1.04 * ones(a)  We can now define the scatterer.  weird_zoop = Scatterer(r, a, h, g)  Loading Scatterers from file  A function  from_csv()  is provided to load a scatterer directly from a comma-separated datafile.  This file should have columns for the x, y, z, a, g, and h values of the scatterer.  If the columns have those names, the function will work automatically:  my_scat = from_csv( path/to/my_scat.csv )  If the columns have some other names, you can provide a dictionary telling the function which is which.  colnames = Dict([( x , foo ),( y , bar ),( z , baz ), ( a , qux ),\n    ( h , plugh ), ( g , garply )])\nmy_scat = from_csv( path/to/my_scat.csv , colnames)  Build-in models  The package comes with a sub-module called  Models  containing several ready-made  Scatterer s.  See the documentation for references for each one.  krill = Models.krill_mcgeehee  Calculating backscatter  There are three functions that calculate backscatter:  form_function ,  backscatter_xsection , and  target_strength .  Each is just a wrapper around the one before it, and they all have the same arguments.  krill = Models.krill_mcgeehee\nfreq = 120e3 # Hz\nsound_speed = 1470 # m/s\n\n# deterministic DWBA\ntarget_strength(krill, freq, sound_speed)\n\n# stochastic SDWBA\nphase_sd = 0.7071\ntarget_strength(krill, freq, sound_speed, phase_sd)  When a frequency and sound speed are provided, the sound is assumed to come from above, as is the usual case with a ship-mounted echosounder.  If you would like it to come from some other direction, you can specify a 3-D wavenumber vector--that is, a vector, pointing in the direction of propagation, whose magnitude is $k = 2 pi f / c$.  k_mag = 2pi * freq / sound_speed\nk_vertical = [0.0, 0.0, -k_mag]\ntarget_strength(krill, k_vertical)\n\nangle = deg2rad(30)\nk_slanted = k_mag * [sin(angle), 0, cos(angle)]\ntarget_strength(krill, k_slanted)  It is usually easier to think of the scatterer tilting than the wavenumber vector.  The  rotate  function does this easily, accepting roll, tilt, and yaw angles (in degrees) as keyword arguments.  target_strength(rotate(krill, tilt=30), freq, sound_speed)\ntarget_strength(rotate(krill, tilt=45, roll=10), freq, sound_speed)  Frequency and tilt-angle spectrums  Often, we are interested in calculating the target strength of a scatter over a range of frequencies or angles.  Two convenience functions are provided to do this:  freq_spectrum  and  tilt_spectrum .  Both return a dictionary, with results in both the linear and log domains.  start, stop = 10e3, 1000e3 # endpoints of the spectrum, in Hz\nnfreqs = 200\nfs = freq_spectrum(krill, start, stop, sound_speed, nfreqs)\n\nrequire(:PyPlot)\nsemilogx(fs[ freqs ], fs[ TS ])\n\n\nts = tilt_spectrum(krill, -180, 180, k_vertical, 360)", 
            "title": "Basic use"
        }, 
        {
            "location": "/API/", 
            "text": "SDWBA\n\n\nExported\n\n\n\n\n\n\nfreq_spectrum(s::SDWBA.Scatterer{T},  freq1,  freq2,  sound_speed) \n\u00b6\n\n\nCalculate backscatter over a range of frequencies.  The insonifying sound comes\nfrom above (i.e., traveling in the -z direction).\n\n\nParameters\n\n\n\n\ns\n : Scatterer object\n\n\nfreq1\n, \nfreq2\n : Endpoints of the angle range to calculate.\n\n\nsound_speed\n : Sound speed in the surrounding medium\n\n\nn\n : Number of frequencies to calculate; defaults to 100\n\n\n\n\nReturns: A dictionary containing elements \"freqs\", \"sigma_bs\", and \"TS\",\n    each a length-n vector.\n\n\nsource:\n\n\nSDWBA/src/Scatterer.jl:208\n\n\n\n\n\n\nfreq_spectrum(s::SDWBA.Scatterer{T},  freq1,  freq2,  sound_speed,  n) \n\u00b6\n\n\nCalculate backscatter over a range of frequencies.  The insonifying sound comes\nfrom above (i.e., traveling in the -z direction).\n\n\nParameters\n\n\n\n\ns\n : Scatterer object\n\n\nfreq1\n, \nfreq2\n : Endpoints of the angle range to calculate.\n\n\nsound_speed\n : Sound speed in the surrounding medium\n\n\nn\n : Number of frequencies to calculate; defaults to 100\n\n\n\n\nReturns: A dictionary containing elements \"freqs\", \"sigma_bs\", and \"TS\",\n    each a length-n vector.\n\n\nsource:\n\n\nSDWBA/src/Scatterer.jl:208\n\n\n\n\n\n\nfrom_csv(filename) \n\u00b6\n\n\nLoad a scatterer from a file on disk with comma-separated values.\n\n\nParameters\n\n\n\n\nfilename\n : String.  Path to the datafile.  This should be a standard .csv file \nwith columns for the x, y, and z coordinates of the scatterer's centerline, as well\nas the \na\n, \nh\n, and \ng\n arguments to Scatterer().\n\n\ncolumns\n : Optional dictionary of column names. If the columns do not have the names \n\n\nx\n, \ny\n, \nz\n, \nh\n, and \ng\n, this must be provided.  The keys are the standard column\nnames and the values are the actual ones in the file.\n\n\n\n\nsource:\n\n\nSDWBA/src/Scatterer.jl:230\n\n\n\n\n\n\nfrom_csv(filename,  columns) \n\u00b6\n\n\nLoad a scatterer from a file on disk with comma-separated values.\n\n\nParameters\n\n\n\n\nfilename\n : String.  Path to the datafile.  This should be a standard .csv file \nwith columns for the x, y, and z coordinates of the scatterer's centerline, as well\nas the \na\n, \nh\n, and \ng\n arguments to Scatterer().\n\n\ncolumns\n : Optional dictionary of column names. If the columns do not have the names \n\n\nx\n, \ny\n, \nz\n, \nh\n, and \ng\n, this must be provided.  The keys are the standard column\nnames and the values are the actual ones in the file.\n\n\n\n\nsource:\n\n\nSDWBA/src/Scatterer.jl:230\n\n\n\n\n\n\nlength(s::SDWBA.Scatterer{T}) \n\u00b6\n\n\nReturn the length of the scatterer (cartesian distance from one end to the other).\n\n\nsource:\n\n\nSDWBA/src/Scatterer.jl:61\n\n\n\n\n\n\nrotate(s::SDWBA.Scatterer{T}) \n\u00b6\n\n\nRotate the scatterer in space, returning a rotated copy.\n\n\nParameters\n\n\n\n\nroll\n : Angle to roll the scatterer, in degrees. Defaults to 0.\n\n\ntilt\n : Angle to tilt the scatterer, in degrees. Defaults to 0.\n\n\nyaw\n : Angle to yaw the scatterer, in degrees. Defaults to 0.\n\n\n\n\nReturns\n\n\nA Scatterer with the same shape and properties, but a new orientation.\n\n\nThe roll, tilt, and yaw refer to rotations around the x, y, and z axes,\nrespectively. They are applied in that order.\n\n\nsource:\n\n\nSDWBA/src/Scatterer.jl:77\n\n\n\n\n\n\ntilt_spectrum(s::SDWBA.Scatterer{T},  angle1,  angle2,  k) \n\u00b6\n\n\nCalculate backscatter over a range of angles.\n\n\nParameters\n\n\n\n\ns\n : Scatterer object\n\n\nangle1\n, \nangle2\n : Endpoints of the angle range to calculate.\n\n\nk\n : Acoustic wavenumber vector\n\n\nn\n : Number of angles to calculate; defaults to 100\n\n\n\n\nReturns\n\n\nA dictionary containing elements \"angles\", \"sigma_bs\", and \"TS\",\neach a length-n vector.\n\n\nsource:\n\n\nSDWBA/src/Scatterer.jl:183\n\n\n\n\n\n\ntilt_spectrum(s::SDWBA.Scatterer{T},  angle1,  angle2,  k,  n) \n\u00b6\n\n\nCalculate backscatter over a range of angles.\n\n\nParameters\n\n\n\n\ns\n : Scatterer object\n\n\nangle1\n, \nangle2\n : Endpoints of the angle range to calculate.\n\n\nk\n : Acoustic wavenumber vector\n\n\nn\n : Number of angles to calculate; defaults to 100\n\n\n\n\nReturns\n\n\nA dictionary containing elements \"angles\", \"sigma_bs\", and \"TS\",\neach a length-n vector.\n\n\nsource:\n\n\nSDWBA/src/Scatterer.jl:183", 
            "title": "Function Reference"
        }, 
        {
            "location": "/API/#sdwba", 
            "text": "", 
            "title": "SDWBA"
        }, 
        {
            "location": "/API/#exported", 
            "text": "freq_spectrum(s::SDWBA.Scatterer{T},  freq1,  freq2,  sound_speed)  \u00b6  Calculate backscatter over a range of frequencies.  The insonifying sound comes\nfrom above (i.e., traveling in the -z direction).  Parameters   s  : Scatterer object  freq1 ,  freq2  : Endpoints of the angle range to calculate.  sound_speed  : Sound speed in the surrounding medium  n  : Number of frequencies to calculate; defaults to 100   Returns: A dictionary containing elements \"freqs\", \"sigma_bs\", and \"TS\",\n    each a length-n vector.  source:  SDWBA/src/Scatterer.jl:208    freq_spectrum(s::SDWBA.Scatterer{T},  freq1,  freq2,  sound_speed,  n)  \u00b6  Calculate backscatter over a range of frequencies.  The insonifying sound comes\nfrom above (i.e., traveling in the -z direction).  Parameters   s  : Scatterer object  freq1 ,  freq2  : Endpoints of the angle range to calculate.  sound_speed  : Sound speed in the surrounding medium  n  : Number of frequencies to calculate; defaults to 100   Returns: A dictionary containing elements \"freqs\", \"sigma_bs\", and \"TS\",\n    each a length-n vector.  source:  SDWBA/src/Scatterer.jl:208    from_csv(filename)  \u00b6  Load a scatterer from a file on disk with comma-separated values.  Parameters   filename  : String.  Path to the datafile.  This should be a standard .csv file \nwith columns for the x, y, and z coordinates of the scatterer's centerline, as well\nas the  a ,  h , and  g  arguments to Scatterer().  columns  : Optional dictionary of column names. If the columns do not have the names   x ,  y ,  z ,  h , and  g , this must be provided.  The keys are the standard column\nnames and the values are the actual ones in the file.   source:  SDWBA/src/Scatterer.jl:230    from_csv(filename,  columns)  \u00b6  Load a scatterer from a file on disk with comma-separated values.  Parameters   filename  : String.  Path to the datafile.  This should be a standard .csv file \nwith columns for the x, y, and z coordinates of the scatterer's centerline, as well\nas the  a ,  h , and  g  arguments to Scatterer().  columns  : Optional dictionary of column names. If the columns do not have the names   x ,  y ,  z ,  h , and  g , this must be provided.  The keys are the standard column\nnames and the values are the actual ones in the file.   source:  SDWBA/src/Scatterer.jl:230    length(s::SDWBA.Scatterer{T})  \u00b6  Return the length of the scatterer (cartesian distance from one end to the other).  source:  SDWBA/src/Scatterer.jl:61    rotate(s::SDWBA.Scatterer{T})  \u00b6  Rotate the scatterer in space, returning a rotated copy.  Parameters   roll  : Angle to roll the scatterer, in degrees. Defaults to 0.  tilt  : Angle to tilt the scatterer, in degrees. Defaults to 0.  yaw  : Angle to yaw the scatterer, in degrees. Defaults to 0.   Returns  A Scatterer with the same shape and properties, but a new orientation.  The roll, tilt, and yaw refer to rotations around the x, y, and z axes,\nrespectively. They are applied in that order.  source:  SDWBA/src/Scatterer.jl:77    tilt_spectrum(s::SDWBA.Scatterer{T},  angle1,  angle2,  k)  \u00b6  Calculate backscatter over a range of angles.  Parameters   s  : Scatterer object  angle1 ,  angle2  : Endpoints of the angle range to calculate.  k  : Acoustic wavenumber vector  n  : Number of angles to calculate; defaults to 100   Returns  A dictionary containing elements \"angles\", \"sigma_bs\", and \"TS\",\neach a length-n vector.  source:  SDWBA/src/Scatterer.jl:183    tilt_spectrum(s::SDWBA.Scatterer{T},  angle1,  angle2,  k,  n)  \u00b6  Calculate backscatter over a range of angles.  Parameters   s  : Scatterer object  angle1 ,  angle2  : Endpoints of the angle range to calculate.  k  : Acoustic wavenumber vector  n  : Number of angles to calculate; defaults to 100   Returns  A dictionary containing elements \"angles\", \"sigma_bs\", and \"TS\",\neach a length-n vector.  source:  SDWBA/src/Scatterer.jl:183", 
            "title": "Exported"
        }, 
        {
            "location": "/Models/", 
            "text": "SDWBA.Models\n\n\nExported\n\n\n\n\n\n\ncalanoid_copepod \n\u00b6\n\n\nGeneric calanoid copepod shape, 1 mm long, with g and h for \"typical\" marine zooplankton\n(both 1.04, as per Stanton and Chu 2000, 'Review and recommendations for the modelling \nof acoustic scattering by fluid-like elongated zooplankton: euphausiids and copepods.'\nICES Journal of Marine Science 57, 793-807).\n\n\nsource:\n\n\nSDWBA/src/Models.jl:46\n\n\n\n\n\n\nkrill_conti \n\u00b6\n\n\nKrill shape from Conti and Demer, 2006, 'Improved parameterization of the SDWBA for \nestimating krill target strength.' ICES Journal of Marine Science 63(5), 928-935.\n\n\nsource:\n\n\nSDWBA/src/Models.jl:28\n\n\n\n\n\n\nkrill_mcgeehee \n\u00b6\n\n\nKrill shape from McGeehee et al. 1998, 'Effects of orientation on acoustic scattering\nfrom Antarctic krill at 120 kHz.' Deep-Sea Research II 45(7), 1273-1294.\n\n\nsource:\n\n\nSDWBA/src/Models.jl:22\n\n\n\n\n\n\nsandeel \n\u00b6\n\n\nGeneric sand eel/sand lance shape (Ammodytes spp.).  Shape is taken from illustration in \nBigelow and Schroeder, 'Fishes of the Gulf of Maine.'  Material properties from \nYasuma et al. (2009), 'Density and sound-speed contrasts, and target strength of \nJapanese sandeel Ammodytes personatus.' Fisheries Science 75 (3) 545-552.\n\n\nsource:\n\n\nSDWBA/src/Models.jl:38", 
            "title": "Included scatterers"
        }, 
        {
            "location": "/Models/#sdwbamodels", 
            "text": "", 
            "title": "SDWBA.Models"
        }, 
        {
            "location": "/Models/#exported", 
            "text": "calanoid_copepod  \u00b6  Generic calanoid copepod shape, 1 mm long, with g and h for \"typical\" marine zooplankton\n(both 1.04, as per Stanton and Chu 2000, 'Review and recommendations for the modelling \nof acoustic scattering by fluid-like elongated zooplankton: euphausiids and copepods.'\nICES Journal of Marine Science 57, 793-807).  source:  SDWBA/src/Models.jl:46    krill_conti  \u00b6  Krill shape from Conti and Demer, 2006, 'Improved parameterization of the SDWBA for \nestimating krill target strength.' ICES Journal of Marine Science 63(5), 928-935.  source:  SDWBA/src/Models.jl:28    krill_mcgeehee  \u00b6  Krill shape from McGeehee et al. 1998, 'Effects of orientation on acoustic scattering\nfrom Antarctic krill at 120 kHz.' Deep-Sea Research II 45(7), 1273-1294.  source:  SDWBA/src/Models.jl:22    sandeel  \u00b6  Generic sand eel/sand lance shape (Ammodytes spp.).  Shape is taken from illustration in \nBigelow and Schroeder, 'Fishes of the Gulf of Maine.'  Material properties from \nYasuma et al. (2009), 'Density and sound-speed contrasts, and target strength of \nJapanese sandeel Ammodytes personatus.' Fisheries Science 75 (3) 545-552.  source:  SDWBA/src/Models.jl:38", 
            "title": "Exported"
        }
    ]
}